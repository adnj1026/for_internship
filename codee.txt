/*
  MPU6050 Manual I2C Interface (No Wire.h)
  Author: Aneeh Datta N Jois
  Description: Implements bit-banging I2C to communicate with MPU6050
               and read raw accelerometer and gyroscope data.
*/

#define SDA_PIN 4  
#define SCL_PIN 5  
#define MPU_ADDR 0x68

void i2c_delay() {
  delayMicroseconds(5); 
}

void sda_high() { pinMode(SDA_PIN, INPUT_PULLUP); }
void sda_low()  { pinMode(SDA_PIN, OUTPUT); digitalWrite(SDA_PIN, LOW); }
void scl_high() { pinMode(SCL_PIN, INPUT_PULLUP); }
void scl_low()  { pinMode(SCL_PIN, OUTPUT); digitalWrite(SCL_PIN, LOW); }

void i2c_start() {
  sda_high(); scl_high(); i2c_delay();
  sda_low(); i2c_delay();
  scl_low(); i2c_delay();
}

void i2c_stop() {
  sda_low(); i2c_delay();
  scl_high(); i2c_delay();
  sda_high(); i2c_delay();
}

void i2c_write_bit(uint8_t bit) {
  if (bit) sda_high(); else sda_low();
  i2c_delay();
  scl_high(); i2c_delay();
  scl_low(); i2c_delay();
}

uint8_t i2c_read_bit() {
  sda_high();
  i2c_delay();
  scl_high();
  uint8_t bit = digitalRead(SDA_PIN);
  i2c_delay();
  scl_low();
  return bit;
}

uint8_t i2c_write_byte(uint8_t byte) {
  for (int i = 0; i < 8; i++) {
    i2c_write_bit((byte & 0x80) != 0);
    byte <<= 1;
  }
  return !i2c_read_bit(); 
}

uint8_t i2c_read_byte(uint8_t ack) {
  uint8_t byte = 0;
  for (int i = 0; i < 8; i++) {
    byte <<= 1;
    byte |= i2c_read_bit();
  }
  i2c_write_bit(!ack); 
  return byte;
}

void mpu_write_reg(uint8_t reg, uint8_t data) {
  i2c_start();
  i2c_write_byte((MPU_ADDR << 1) | 0); 
  i2c_write_byte(reg);
  i2c_write_byte(data);
  i2c_stop();
}

uint8_t mpu_read_reg(uint8_t reg) {
  uint8_t data;
  i2c_start();
  i2c_write_byte((MPU_ADDR << 1) | 0);
  i2c_write_byte(reg);
  i2c_start();
  i2c_write_byte((MPU_ADDR << 1) | 1);
  data = i2c_read_byte(0); 
  i2c_stop();
  return data;
}

void mpu_read_burst(uint8_t reg, uint8_t *buf, uint8_t len) {
  i2c_start();
  i2c_write_byte((MPU_ADDR << 1) | 0);
  i2c_write_byte(reg);
  i2c_start();
  i2c_write_byte((MPU_ADDR << 1) | 1);
  for (uint8_t i = 0; i < len; i++) {
    buf[i] = i2c_read_byte(i < (len - 1)); 
  }
  i2c_stop();
}

void setup() {
  pinMode(SDA_PIN, INPUT_PULLUP);
  pinMode(SCL_PIN, INPUT_PULLUP);
  Serial.begin(9600);
  delay(100);

  // Wake up MPU6050 (clear sleep bit)
  mpu_write_reg(0x6B, 0x00);
  delay(100);

  Serial.println("MPU6050 Initialized");
}

void loop() {
  uint8_t buf[14];
  mpu_read_burst(0x3B, buf, 14);

  int16_t ax = (buf[0] << 8) | buf[1];
  int16_t ay = (buf[2] << 8) | buf[3];
  int16_t az = (buf[4] << 8) | buf[5];
  int16_t gx = (buf[8] << 8) | buf[9];
  int16_t gy = (buf[10] << 8) | buf[11];
  int16_t gz = (buf[12] << 8) | buf[13];

  Serial.print("AX: "); Serial.print(ax);
  Serial.print(" AY: "); Serial.print(ay);
  Serial.print(" AZ: "); Serial.print(az);
  Serial.print(" | GX: "); Serial.print(gx);
  Serial.print(" GY: "); Serial.print(gy);
  Serial.print(" GZ: "); Serial.println(gz);

  delay(500);
}
